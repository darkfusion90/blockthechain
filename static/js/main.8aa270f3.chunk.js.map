{"version":3,"sources":["components/AccountDetais.tsx","components/BalanceDetails.tsx","App.tsx","index.tsx"],"names":["AccountDetais","updateAccount","account","React","useState","error","setError","connectMetamask","a","web3","givenProvider","request","method","acc","className","message","renderError","content","onClick","renderConnectBtn","BalanceDetails","balance","setBalance","getBalance","provider","ethers","providers","Web3Provider","window","ethereum","bal","console","log","userReadableBal","utils","formatUnits","renderBalance","renderBalanceBtn","App","setAccount","isMetaMask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2cA0DeA,EAjDuC,SAAC,GAGhD,IAFLC,EAEI,EAFJA,cACAC,EACI,EADJA,QAEA,EAA0BC,IAAMC,WAAhC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAe,uCAAG,4BAAAC,EAAA,+EAEFC,IAAKC,cAAcC,QAAQ,CAC3CC,OAAQ,wBAHU,OAEdC,EAFc,OAKpBZ,EAAcY,GALM,gDAOpBP,EAAS,EAAD,IAPY,yDAAH,qDAiCrB,OACE,sBAAKQ,UAAU,UAAf,UACE,sDAvBEZ,EACK,8BAAMA,IAGR,wEAWW,WAClB,GAAIG,EACF,OAAO,mBAAGS,UAAU,YAAb,SAA0BT,EAAMU,UAQtCC,GAlBoB,WACvB,IAAMC,EAAUf,EACZ,uBACA,mCAEJ,OAAO,wBAAQgB,QAASX,EAAjB,SAAmCU,IAcvCE,O,SCQQC,EApDwC,SAAC,GAAiB,IAAflB,EAAc,EAAdA,QACxD,EAA0BC,IAAMC,WAAhC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BH,IAAMC,WAApC,mBAAOiB,EAAP,KAAgBC,EAAhB,KAEMC,EAAU,uCAAG,8BAAAf,EAAA,kEAETgB,EAAW,IAAIC,IAAOC,UAAUC,aAAaC,OAAOC,WACtD3B,EAHW,gCAIKsB,EAASD,WAAT,UAAuBrB,IAJ5B,OAIP4B,EAJO,OAKbC,QAAQC,IAAI,CAAEF,QACdR,EAAWQ,GANE,yDASfxB,EAAS,EAAD,IATO,0DAAH,qDAsChB,OACE,sBAAKQ,UAAU,UAAf,UACE,iDA3BkB,WACpB,IAAKZ,EACH,OAAO,wDAGT,GAAImB,EAAS,CACX,IAAMY,EAAkBR,IAAOS,MAAMC,YAAYd,GACjD,OAAO,gCAAMY,EAAN,UAGT,OAAO,qDAkBJG,GAfoB,WACvB,GAAIlC,EACF,OAAO,wBAAQgB,QAASK,EAAjB,iCAcNc,GAVe,WAClB,GAAIhC,EACF,OAAO,mBAAGS,UAAU,YAAb,SAA0BT,EAAMU,UAStCC,OCnBQsB,G,OA7BH,WACV,MAA8BnC,IAAMC,WAApC,mBAAOF,EAAP,KAAgBqC,EAAhB,KAqBA,OACE,qBAAKzB,UAAU,MAAf,SAnBoBc,OAAOC,UAAYD,OAAOC,SAASW,WAQrD,qCACE,cAAC,EAAD,CACEtC,QAASA,EACTD,cAAe,SAACC,GAAD,OAAaqC,EAAWrC,MAEzC,cAAC,EAAD,CAAgBA,QAASA,OAVzB,oGCVRuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8aa270f3.chunk.js","sourcesContent":["import React from \"react\";\nimport web3 from \"web3\";\nimport Account from \"../types/Account\";\n\ninterface IAccountDetailsProps {\n  updateAccount: (account: Account) => void;\n  account: Account;\n}\n\nconst AccountDetais: React.FC<IAccountDetailsProps> = ({\n  updateAccount,\n  account,\n}) => {\n  const [error, setError] = React.useState<any>();\n\n  const connectMetamask = async () => {\n    try {\n      const acc = await web3.givenProvider.request({\n        method: \"eth_requestAccounts\",\n      });\n      updateAccount(acc);\n    } catch (e) {\n      setError(e);\n    }\n  };\n\n  const renderAccount = () => {\n    if (account) {\n      return <pre>{account}</pre>;\n    }\n\n    return <pre>You have not connected an account yet</pre>;\n  };\n\n  const renderConnectBtn = () => {\n    const content = account\n      ? \"Reconnect to account\"\n      : \"Click here to connect an account\";\n\n    return <button onClick={connectMetamask}>{content}</button>;\n  };\n\n  const renderError = () => {\n    if (error) {\n      return <p className=\"error-msg\">{error.message}</p>;\n    }\n  };\n\n  return (\n    <div className=\"section\">\n      <h1>Your Account address</h1>\n      {renderAccount()}\n      {renderError()}\n      {renderConnectBtn()}\n    </div>\n  );\n};\n\nexport default AccountDetais;\n","import React from \"react\";\nimport { ethers } from \"ethers\";\n\nimport Account from \"../types/Account\";\n\ninterface IBalanceDetailsProps {\n  account: Account;\n}\n\nconst BalanceDetails: React.FC<IBalanceDetailsProps> = ({ account }) => {\n  const [error, setError] = React.useState<any>();\n  const [balance, setBalance] = React.useState<ethers.BigNumber>();\n\n  const getBalance = async () => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      if (account) {\n        const bal = await provider.getBalance(`${account}`);\n        console.log({ bal });\n        setBalance(bal);\n      }\n    } catch (e) {\n      setError(e);\n    }\n  };\n\n  const renderBalance = () => {\n    if (!account) {\n      return <pre>Account not connected</pre>;\n    }\n\n    if (balance) {\n      const userReadableBal = ethers.utils.formatUnits(balance);\n      return <pre>{userReadableBal} ETH</pre>;\n    }\n\n    return <pre>Balance is unknown</pre>;\n  };\n\n  const renderBalanceBtn = () => {\n    if (account) {\n      return <button onClick={getBalance}>Get account balance</button>;\n    }\n  };\n\n  const renderError = () => {\n    if (error) {\n      return <p className=\"error-msg\">{error.message}</p>;\n    }\n  };\n\n  return (\n    <div className=\"section\">\n      <h1>Account Balance</h1>\n      {renderBalance()}\n      {renderBalanceBtn()}\n      {renderError()}\n    </div>\n  );\n};\n\nexport default BalanceDetails;\n","import React from \"react\";\n\nimport Account from \"./types/Account\";\nimport AccountDetails from \"./components/AccountDetais\";\nimport BalanceDetails from \"./components/BalanceDetails\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [account, setAccount] = React.useState<Account>();\n\n  const renderContent = () => {\n    const hasMetamask = window.ethereum && window.ethereum.isMetaMask;\n    if (!hasMetamask) {\n      return (\n        <pre>You need to install Metamask in your browser for this to work</pre>\n      );\n    }\n\n    return (\n      <>\n        <AccountDetails\n          account={account}\n          updateAccount={(account) => setAccount(account)}\n        />\n        <BalanceDetails account={account} />\n      </>\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}